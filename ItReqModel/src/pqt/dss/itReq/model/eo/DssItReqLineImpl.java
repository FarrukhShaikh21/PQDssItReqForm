package pqt.dss.itReq.model.eo;

import java.sql.SQLException;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Oct 07 11:01:04 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DssItReqLineImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        LnIdPk,
        HdIdFk,
        TypeIdFk,
        UserIdFk,
        EnterDate,
        LastUpdatedBy,
        LastUpdatedDate,
        LnItemIdFk,
        LnRemarks,
        DssItReqHeader;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int LNIDPK = AttributesEnum.LnIdPk.index();
    public static final int HDIDFK = AttributesEnum.HdIdFk.index();
    public static final int TYPEIDFK = AttributesEnum.TypeIdFk.index();
    public static final int USERIDFK = AttributesEnum.UserIdFk.index();
    public static final int ENTERDATE = AttributesEnum.EnterDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int LNITEMIDFK = AttributesEnum.LnItemIdFk.index();
    public static final int LNREMARKS = AttributesEnum.LnRemarks.index();
    public static final int DSSITREQHEADER = AttributesEnum.DssItReqHeader.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DssItReqLineImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("pqt.dss.itReq.model.eo.DssItReqLine");
    }


    /**
     * Gets the attribute value for LnIdPk, using the alias name LnIdPk.
     * @return the value of LnIdPk
     */
    public Number getLnIdPk() {
        return (Number) getAttributeInternal(LNIDPK);
    }

    /**
     * Sets <code>value</code> as the attribute value for LnIdPk.
     * @param value value to set the LnIdPk
     */
    public void setLnIdPk(Number value) {
        setAttributeInternal(LNIDPK, value);
    }

    /**
     * Gets the attribute value for HdIdFk, using the alias name HdIdFk.
     * @return the value of HdIdFk
     */
    public Number getHdIdFk() {
        return (Number) getAttributeInternal(HDIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for HdIdFk.
     * @param value value to set the HdIdFk
     */
    public void setHdIdFk(Number value) {
        setAttributeInternal(HDIDFK, value);
    }

    /**
     * Gets the attribute value for TypeIdFk, using the alias name TypeIdFk.
     * @return the value of TypeIdFk
     */
    public String getTypeIdFk() {
        return (String) getAttributeInternal(TYPEIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for TypeIdFk.
     * @param value value to set the TypeIdFk
     */
    public void setTypeIdFk(String value) {
        setAttributeInternal(TYPEIDFK, value);
    }

    /**
     * Gets the attribute value for UserIdFk, using the alias name UserIdFk.
     * @return the value of UserIdFk
     */
    public Number getUserIdFk() {
        return (Number) getAttributeInternal(USERIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserIdFk.
     * @param value value to set the UserIdFk
     */
    public void setUserIdFk(Number value) {
        setAttributeInternal(USERIDFK, value);
    }

    /**
     * Gets the attribute value for EnterDate, using the alias name EnterDate.
     * @return the value of EnterDate
     */
    public Date getEnterDate() {
        return (Date) getAttributeInternal(ENTERDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnterDate.
     * @param value value to set the EnterDate
     */
    public void setEnterDate(Date value) {
        setAttributeInternal(ENTERDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public Number getLastUpdatedBy() {
        return (Number) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the value of LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date) getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedDate.
     * @param value value to set the LastUpdatedDate
     */
    public void setLastUpdatedDate(Date value) {
        setAttributeInternal(LASTUPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for LnItemIdFk, using the alias name LnItemIdFk.
     * @return the value of LnItemIdFk
     */
    public Number getLnItemIdFk() {
        return (Number) getAttributeInternal(LNITEMIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for LnItemIdFk.
     * @param value value to set the LnItemIdFk
     */
    public void setLnItemIdFk(Number value) {
        setAttributeInternal(LNITEMIDFK, value);
    }

    /**
     * Gets the attribute value for LnRemarks, using the alias name LnRemarks.
     * @return the value of LnRemarks
     */
    public String getLnRemarks() {
        return (String) getAttributeInternal(LNREMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for LnRemarks.
     * @param value value to set the LnRemarks
     */
    public void setLnRemarks(String value) {
        setAttributeInternal(LNREMARKS, value);
    }

    /**
     * @return the associated entity DssItReqHeaderImpl.
     */
    public DssItReqHeaderImpl getDssItReqHeader() {
        return (DssItReqHeaderImpl) getAttributeInternal(DSSITREQHEADER);
    }

    /**
     * Sets <code>value</code> as the associated entity DssItReqHeaderImpl.
     */
    public void setDssItReqHeader(DssItReqHeaderImpl value) {
        setAttributeInternal(DSSITREQHEADER, value);
    }


    /**
     * @param lnIdPk key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number lnIdPk) {
        return new Key(new Object[] { lnIdPk });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
                 super.create(attributeList);
                 Date currentDate = new Date();
                 setEnterDate((Date) currentDate.getCurrentDate());
                 setLastUpdatedDate((Date) currentDate.getCurrentDate());
                 SequenceImpl seq = new SequenceImpl("DSS_IT_REQ_LINE_SEQ", getDBTransaction());
                 setLnIdPk(seq.getSequenceNumber());
                 FacesContext fctx = FacesContext.getCurrentInstance();
                 ExternalContext ectx = fctx.getExternalContext();
                 HttpSession userSession = (HttpSession) ectx.getSession(false);
                 try {
                     setUserIdFk(new Number(userSession.getAttribute("pUserId")));
                     setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
                 } catch (SQLException ex) {
                     setUserIdFk(new Number(0));
                     setLastUpdatedBy(new Number(0));
                 }
             
             }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */

    protected void doDML(int operation, TransactionEvent e) {
        Date currentDate = new Date();
        if (operation == DML_UPDATE) {
            setLastUpdatedDate((Date) currentDate.getCurrentDate());
            FacesContext fctx = FacesContext.getCurrentInstance();
            ExternalContext ectx = fctx.getExternalContext();
            HttpSession userSession = (HttpSession) ectx.getSession(false);
            try {
                setUserIdFk(new Number(userSession.getAttribute("pUserId")));
                setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
            } catch (SQLException ex) {
                setUserIdFk(new Number(0));
                setLastUpdatedBy(new Number(0));
            }
        }
        super.doDML(operation, e);
    }
    }


